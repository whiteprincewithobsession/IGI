import task1
import task2
import task3
import task4
import task5
import random_generator
from checkers import input_size, float_checker
from random import uniform

def start_task1(choice : int)-> None:
    """
    Function for launching task №1
    """
    if choice == 1:
        print("Entering x...")
        x = float_checker(-1, 1)
        print("Entering epsilon...")
        eps = float_checker(0, 1)
    if choice == 2:
        x = uniform(-1.0, 1.0)
        eps = uniform(0.0, 1.0)
    result = task1.series_calculating(x, eps)
    print(f"""Function: ln(1-x), where x in the range (-1, 1)\n
Function value using the "math" module: {result[1]}
Function value using the Taylor series: {result[0]}
Accuracy: {eps}
Number of series members: {result[2]}""")
    

def start_task2(choice : int) -> None:
    """
    Function for launching task №2
    """
    seq : list = []
    if choice == 1:
        seq = task2.input_numbers()
    else:
        size = input_size()
        seq = random_generator.int_sequence(size)
        print(f"Sequence, generated by random: {seq}")
    try:
        print(f"Amount of numbers greater than 12, up to 133: {task2.count_numbers(seq)}")
    except Exception as e:
        print(e) 
        
def start_task3(choice : int) -> None:
    """
    Function for launching task №3
    """
    test_string = ""
    if choice == 1:
        print("Enter the string:")
        test_string = input()
    else:
        size : int = -1
        size = input_size()
        test_string = random_generator.literal_sequence(size)
    try:
        print(f"String, generated with random: {test_string}\n")
        print(f"Amount of digits in the test string: {task3.count_digits(test_string)}\n")
    except Exception as e:
        print(e) 

def decorator_output(func):
    """
    Decorator for displaying the results of task 4
    """
    def wrapper():
        result = func()
        print(f"Count of words with length less than 7: {result[0]}")
        print(f"The shortest word with the last letter 'a': {result[1]}")
        print("All words from the string in descending order:")
        print(result[2])
    return wrapper

@decorator_output
def start_task4() -> tuple[int, str, list[str]]:
    """
    Function for launching task №4
    """
    print(f"String for testing: {task4.task_string}\n")
    num_words = task4.count_words(task4.task_string)
    minimal_word = task4.find_minimal_word(task4.task_string)
    all_words = task4.words_in_descending_order(task4.task_string)
    return num_words, minimal_word, all_words
    
def start_task5(choice : int) -> None:
    """
    Function for launching task №5
    """
    size : int = -1
    size = input_size()
    seq : list[float] = [] 
    if choice == 1:
        i : int = 0
        while(i < size):
            print(f"Enter {i + 1} float number:")
            try:
                i += 1
                seq.append(float(input()))
            except:
                print('Incorrect input, try again!')
                i -= 1
                continue
    if choice == 2:
        seq = random_generator.float_sequence(size)
    try:
        print(f"Sequence: {seq}\n")
        print(f"Maximum element modulo: {task5.find_max_number(seq)}")
        print(f"Product between zeros: {task5.find_product_between_zeros(seq)}")
    except Exception as e:
        print(e)
    